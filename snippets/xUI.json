{
	"iife": {
		"prefix": "iife",
		"body": [
			"(function(){",
			"$1",
			"})();"
		],
		"description": "iife"
	},
	"boundless generate comment for scan": {
		"prefix": "xgcomment",
		"body": [
			"/* @typescriptDeclare $2 */"
		],
		"description": "boundless generate comment for scan"
	},
	"boundless Vue SFC Dialog": {
		"prefix": "xsfcdialog",
		"body": [
			"<template>",
			"\t<xDialog>",
			"\t\t<xCard class=\"mt10\" :header=\"i18n('xxxxxxxx')\">",
			"\t\t\t<form ref=\"form\" :style=\"labelStyle\">",
			"\t\t\t\t<xItem :configs=\"configs\" v-for=\"(configs, prop) in form\" :key=\"prop\" />",
			"\t\t\t</form>",
			"\t\t</xCard>",
			"\t\t<template #footer>",
			"\t\t\t<xBtn :configs=\"btnOk\" />",
			"\t\t\t<xBtn @click=\"\\$closeWindow\">{{ i18n(\"取消\") }}</xBtn>",
			"\t\t</template>",
			"\t</xDialog>",
			"</template>",
			"<script lang=\"ts\">",
			"export default async function ({ row, callBack }) {",
			"\tconst isUpdate = !!row;",
			"\t/* 必要，混入\"\\$closeWindow\", \"\\$layerMax\", \"\\$layerMin\", \"\\$layerRestore\" */",
			"\tconst { useDialogProps } = await _.\\$importVue(\"/common/utils/hooks.vue\");",
			"\treturn defineComponent({",
			"\t\tinject: [\"APP\"],",
			"\t\tprops: useDialogProps(),",
			"\t\tmounted() {},",
			"\t\tdata() {",
			"\t\t\treturn {",
			"\t\t\t\tform: {",
			"\t\t\t\t\tname: { value: \"\", label: i18n(\"名称\"), rules: [Vue._rules.required()] }",
			"\t\t\t\t}",
			"\t\t\t};",
			"\t\t},",
			"\t\tcomputed: {",
			"\t\t\tlabelStyle() {",
			"\t\t\t\treturn {",
			"\t\t\t\t\t\"--xItem-label-width\": \"144px\"",
			"\t\t\t\t};",
			"\t\t\t},",
			"\t\t\tcptFormData() {",
			"\t\t\t\treturn _.\\$pickValueFromConfigs(this.form);",
			"\t\t\t},",
			"\t\t\tbtnOk() {",
			"\t\t\t\tconst vm = this;",
			"\t\t\t\treturn {",
			"\t\t\t\t\tlabel: i18n(\"确定\"),",
			"\t\t\t\t\tpreset: \"blue\",",
			"\t\t\t\t\tasync onClick() {",
			"\t\t\t\t\t\tconst [error] = await _.\\$validateForm(vm.\\$refs.form);",
			"\t\t\t\t\t\tif (error) {",
			"\t\t\t\t\t\t\treturn;",
			"\t\t\t\t\t\t}",
			"\t\t\t\t\t\tthis.upsertOne();",
			"\t\t\t\t\t}",
			"\t\t\t\t};",
			"\t\t\t}",
			"\t\t},",
			"\t\tmethods: {",
			"\t\t\tinit() {",
			"\t\t\t\tif (isUpdate) {",
			"\t\t\t\t\t_.\\$setValToForm(this.form, row);",
			"\t\t\t\t}",
			"\t\t\t},",
			"\t\t\tasync upsertOne() {",
			"\t\t\t\tcallBack && callBack(this.cptFormData);",
			"\t\t\t\tthis.\\$closeWindow();",
			"\t\t\t}",
			"\t\t}",
			"\t});",
			"}",
			"</script>",
			"<style lang=\"less\"></style>"
		],
		"description": "dialog template"
	},
	"boundless Vue SFC template": {
		"prefix": "xsfc",
		"body": [
			"<style lang=\"less\"></style>",
			"<template>",
			"    <div>{{ THIS_FILE_URL }}</div>",
			"</template>",
			"<script lang=\"ts\">",
			"export default async function () {",
			"    const { THIS_FILE_URL } = this;",
			"    return defineComponent({",
			"        data() {return {THIS_FILE_URL};}",
			"    });",
			"} ",
			"</script>"
		],
		"description": "pure sfc template"
	},
	"importVueSFC": {
		"prefix": "ximv",
		"body": [
			"const $2 = await _.\\$importVue(\"$1\")"
		],
		"description": "use _.$importVue load Vue SFC (custom)"
	}
}